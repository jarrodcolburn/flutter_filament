// // AUTO GENERATED FILE, DO NOT EDIT.
// //
// // Generated by `package:ffigen`.
// // ignore_for_file: type=lint
// import 'package:flutter_filament/ffi/ffi_web_js/generated_bindings_js.dart';
// import 'package:wasm_ffi/wasm_ffi.dart' as ffi;
// import 'dart:js_interop';

// late NativeLibrary _lib;

// void flutter_filament_web_load_resource_callback(
//   ffi.Pointer<ffi.Void> data,
//   int length,
//   ffi.Pointer<ffi.Void> context,
// ) => _lib.flutter_filament_web_load_resource_callback;

// int flutter_filament_web_get(
//   ffi.Pointer<ffi.Char> ptr,
//   int offset,
// ) => _lib.flutter_filament_web_get;

// double flutter_filament_web_get_float(
//   ffi.Pointer<ffi.Float> ptr,
//   int offset,
// ) => _lib.flutter_filament_web_get_float;

// double flutter_filament_web_get_double(
//   ffi.Pointer<ffi.Double> ptr,
//   int offset,
// ) => _lib.flutter_filament_web_get_double;

// ffi.Pointer<ffi.Void> flutter_filament_web_get_pointer(
//   ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
//   int offset,
// ) => _lib.flutter_filament_web_get_pointer;

// void flutter_filament_web_set(
//   ffi.Pointer<ffi.Char> ptr,
//   int offset,
//   int val,
// ) => _lib.flutter_filament_web_set;

// void flutter_filament_web_set_float(
//   ffi.Pointer<ffi.Float> ptr,
//   int offset,
//   double val,
// ) => _lib.flutter_filament_web_set_float;

// void flutter_filament_web_set_double(
//   ffi.Pointer<ffi.Double> ptr,
//   int offset,
//   double val,
// ) => _lib.flutter_filament_web_set_double;

// void flutter_filament_web_set_pointer(
//   ffi.Pointer<ffi.Pointer<ffi.Void>> ptr,
//   int offset,
//   ffi.Pointer<ffi.Void> val,
// ) => _lib.flutter_filament_web_set_pointer;

// int flutter_filament_web_get_int32(
//   ffi.Pointer<ffi.Int32> ptr,
//   int offset,
// );

// void flutter_filament_web_set_int32(
//   ffi.Pointer<ffi.Int32> ptr,
//   int offset,
//   int value,
// );

// int flutter_filament_web_get_address(
//   ffi.Pointer<ffi.Pointer<ffi.Void>> out,
// ) => _lib.flutter_filament_web_get_address;

// ffi.Pointer<ffi.Void> flutter_filament_web_allocate(
//   int size,
// ) => _lib.flutter_filament_web_allocate;

// void flutter_filament_web_free(
//   ffi.Pointer<ffi.Void> ptr,
// ) => _lib.flutter_filament_web_free;

// int flutter_filament_web_create_gl_context() => _lib.flutter_filament_web_create_gl_context;

// ffi.Pointer<ffi.Void>
//     flutter_filament_web_get_resource_loader_wrapper() => _lib.flutter_filament_web_get_resource_loader_wrapper;

// ffi.Pointer<ffi.Void> create_filament_viewer(
//   ffi.Pointer<ffi.Void> context,
//   ffi.Pointer<ffi.Opaque> loader,
//   ffi.Pointer<ffi.Void> platform,
//   ffi.Pointer<ffi.Char> uberArchivePath,
// ) => _lib.create_filament_viewer;

// void destroy_filament_viewer(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.destroy_filament_viewer;

// ffi.Pointer<ffi.Opaque> make_resource_loader(
//   LoadFilamentResourceFromOwner loadFn,
//   FreeFilamentResourceFromOwner freeFn,
//   ffi.Pointer<ffi.Void> owner,
// ) => _lib.make_resource_loader;

// ffi.Pointer<ffi.Void> get_asset_manager(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_asset_manager;

// void create_render_target(
//   ffi.Pointer<ffi.Void> viewer,
//   int texture,
//   int width,
//   int height,
// ) => _lib.create_render_target;

// void clear_background_image(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_background_image;

// void set_background_image(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> path,
//   bool fillHeight,
// ) => _lib.set_background_image;

// void set_background_image_position(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
//   bool clamp,
// ) => _lib.set_background_image_position;

// void set_background_color(
//   ffi.Pointer<ffi.Void> viewer,
//   double r,
//   double g,
//   double b,
//   double a,
// ) => _lib.set_background_color;

// void set_tone_mapping(
//   ffi.Pointer<ffi.Void> viewer,
//   int toneMapping,
// ) => _lib.set_tone_mapping;

// void set_bloom(
//   ffi.Pointer<ffi.Void> viewer,
//   double strength,
// ) => _lib.set_bloom;

// void load_skybox(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> skyboxPath,
// ) => _lib.load_skybox;

// void load_ibl(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> iblPath,
//   double intensity,
// ) => _lib.load_ibl;

// void rotate_ibl(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Float> rotationMatrix,
// ) => _lib.rotate_ibl;

// void remove_skybox(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.remove_skybox;

// void remove_ibl(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.remove_ibl;

// int add_light(
//   ffi.Pointer<ffi.Void> viewer,
//   int type,
//   double colour,
//   double intensity,
//   double posX,
//   double posY,
//   double posZ,
//   double dirX,
//   double dirY,
//   double dirZ,
//   bool shadows,
// ) => _lib.add_light;

// void remove_light(
//   ffi.Pointer<ffi.Void> viewer,
//   int entityId,
// ) => _lib.remove_light;

// void clear_lights(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_lights;

// int load_glb(
//   ffi.Pointer<ffi.Void> assetManager,
//   ffi.Pointer<ffi.Char> assetPath,
//   bool unlit,
// ) => _lib.load_glb;

// int load_gltf(
//   ffi.Pointer<ffi.Void> assetManager,
//   ffi.Pointer<ffi.Char> assetPath,
//   ffi.Pointer<ffi.Char> relativePath,
// ) => _lib.load_gltf;

// bool set_camera(
//   ffi.Pointer<ffi.Void> viewer,
//   int asset,
//   ffi.Pointer<ffi.Char> nodeName,
// ) => _lib.set_camera;

// void set_view_frustum_culling(
//   ffi.Pointer<ffi.Void> viewer,
//   bool enabled,
// ) => _lib.set_view_frustum_culling;

// void render(
//   ffi.Pointer<ffi.Void> viewer,
//   int frameTimeInNanos,
//   ffi.Pointer<ffi.Void> pixelBuffer,
//   ffi.Pointer<
//           ffi.NativeFunction<
//               ffi.Void Function(ffi.Pointer<ffi.Void> buf, ffi.Size size,
//                   ffi.Pointer<ffi.Void> data)>>
//       callback,
//   ffi.Pointer<ffi.Void> data,
// ) => _lib.render;

// void create_swap_chain(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Void> window,
//   int width,
//   int height,
// ) => _lib.create_swap_chain;

// void destroy_swap_chain(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.destroy_swap_chain;

// void set_frame_interval(
//   ffi.Pointer<ffi.Void> viewer,
//   double interval,
// ) => _lib.set_frame_interval;

// void update_viewport_and_camera_projection(
//   ffi.Pointer<ffi.Void> viewer,
//   int width,
//   int height,
//   double scaleFactor,
// ) => _lib.update_viewport_and_camera_projection;

// void scroll_begin(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.scroll_begin;

// void scroll_update(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
//   double z,
// ) => _lib.scroll_update;

// void scroll_end(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.scroll_end;

// void grab_begin(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
//   bool pan,
// ) => _lib.grab_begin;

// void grab_update(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
// ) => _lib.grab_update;

// void grab_end(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.grab_end;

// void apply_weights(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> weights,
//   int count,
// ) => _lib.apply_weights;

// void set_morph_target_weights(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> morphData,
//   int numWeights,
// ) => _lib.set_morph_target_weights;

// bool set_morph_animation(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> morphData,
//   ffi.Pointer<ffi.Int> morphIndices,
//   int numMorphTargets,
//   int numFrames,
//   double frameLengthInMs,
// ) => _lib.set_morph_animation;

// void add_bone_animation(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Float> frameData,
//   int numFrames,
//   ffi.Pointer<ffi.Char> boneName,
//   ffi.Pointer<ffi.Pointer<ffi.Char>> meshNames,
//   int numMeshTargets,
//   double frameLengthInMs,
// ) => _lib.add_bone_animation;

// bool set_bone_transform(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> transform,
//   ffi.Pointer<ffi.Char> boneName,
// ) => _lib.set_bone_transform;

// void play_animation(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int index,
//   bool loop,
//   bool reverse,
//   bool replaceActive,
//   double crossfade,
// ) => _lib.play_animation;

// void set_animation_frame(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int animationIndex,
//   int animationFrame,
// ) => _lib.set_animation_frame;

// void stop_animation(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int index,
// ) => _lib.stop_animation;

// int get_animation_count(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
// ) => _lib.get_animation_count;

// void get_animation_name(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> outPtr,
//   int index,
// ) => _lib.get_animation_name;

// double get_animation_duration(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int index,
// ) => _lib.get_animation_duration;

// void get_morph_target_name(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
//   ffi.Pointer<ffi.Char> outPtr,
//   int index,
// ) => _lib.get_morph_target_name;

// int get_morph_target_name_count(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
// ) => _lib.get_morph_target_name_count;

// void remove_asset(
//   ffi.Pointer<ffi.Void> viewer,
//   int asset,
// ) => _lib.remove_asset;

// void clear_assets(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_assets;

// bool set_material_color(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
//   int materialIndex,
//   double r,
//   double g,
//   double b,
//   double a,
// ) => _lib.set_material_color;

// void transform_to_unit_cube(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
// ) => _lib.transform_to_unit_cube;

// void set_position(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   double x,
//   double y,
//   double z,
// ) => _lib.set_position;

// void set_rotation(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   double rads,
//   double x,
//   double y,
//   double z,
// ) => _lib.set_rotation;

// void set_scale(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   double scale,
// ) => _lib.set_scale;

// void move_camera_to_asset(
//   ffi.Pointer<ffi.Void> viewer,
//   int asset,
// ) => _lib.move_camera_to_asset;

// void set_camera_exposure(
//   ffi.Pointer<ffi.Void> viewer,
//   double aperture,
//   double shutterSpeed,
//   double sensitivity,
// ) => _lib.set_camera_exposure;

// void set_camera_position(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
//   double z,
// ) => _lib.set_camera_position;

// void get_camera_position(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_position;

// void set_camera_rotation(
//   ffi.Pointer<ffi.Void> viewer,
//   double rads,
//   double x,
//   double y,
//   double z,
// ) => _lib.set_camera_rotation;

// void set_camera_model_matrix(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Float> matrix,
// ) => _lib.set_camera_model_matrix;

// ffi.Pointer<ffi.Double> get_camera_model_matrix(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_model_matrix;

// ffi.Pointer<ffi.Double> get_camera_view_matrix(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_view_matrix;

// ffi.Pointer<ffi.Double> get_camera_projection_matrix(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_projection_matrix;

// void set_camera_projection_matrix(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Double> matrix,
//   double near,
//   double far,
// ) => _lib.set_camera_projection_matrix;

// void set_camera_culling(
//   ffi.Pointer<ffi.Void> viewer,
//   double near,
//   double far,
// ) => _lib.set_camera_culling;

// double get_camera_culling_near(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_culling_near;

// double get_camera_culling_far(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_culling_far;

// ffi.Pointer<ffi.Double> get_camera_culling_projection_matrix(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_culling_projection_matrix;

// ffi.Pointer<ffi.Double> get_camera_frustum(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.get_camera_frustum;

// void set_camera_focal_length(
//   ffi.Pointer<ffi.Void> viewer,
//   double focalLength,
// ) => _lib.set_camera_focal_length;

// void set_camera_focus_distance(
//   ffi.Pointer<ffi.Void> viewer,
//   double focusDistance,
// ) => _lib.set_camera_focus_distance;

// void set_camera_manipulator_options(
//   ffi.Pointer<ffi.Void> viewer,
//   int mode,
//   double orbitSpeedX,
//   double orbitSpeedY,
//   double zoomSpeed,
// ) => _lib.set_camera_manipulator_options;

// int hide_mesh(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
// ) => _lib.hide_mesh;

// int reveal_mesh(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
// ) => _lib.reveal_mesh;

// void set_post_processing(
//   ffi.Pointer<ffi.Void> viewer,
//   bool enabled,
// ) => _lib.set_post_processing;

// void pick(
//   ffi.Pointer<ffi.Void> viewer,
//   int x,
//   int y,
//   ffi.Pointer<EntityId> entityId,
// ) => _lib.pick;

// ffi.Pointer<ffi.Char> get_name_for_entity(
//   ffi.Pointer<ffi.Void> assetManager,
//   int entityId,
// ) => _lib.get_name_for_entity;

// int find_child_entity_by_name(
//   ffi.Pointer<ffi.Void> assetManager,
//   int parent,
//   ffi.Pointer<ffi.Char> name,
// ) => _lib.find_child_entity_by_name;

// void set_recording(
//   ffi.Pointer<ffi.Void> viewer,
//   bool recording,
// ) => _lib.set_recording;

// void set_recording_output_directory(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> outputDirectory,
// ) => _lib.set_recording_output_directory;

// void ios_dummy() => _lib.ios_dummy;

// void flutter_filament_free(
//   ffi.Pointer<ffi.Void> ptr,
// ) => _lib.flutter_filament_free;

// ffi.Pointer<ffi.Void> create_filament_viewer_ffi(
//   ffi.Pointer<ffi.Void> context,
//   ffi.Pointer<ffi.Void> platform,
//   ffi.Pointer<ffi.Char> uberArchivePath,
//   ffi.Pointer<ffi.Void> loader,
//   ffi.Pointer<
//           ffi.NativeFunction<
//               ffi.Void Function(ffi.Pointer<ffi.Void> renderCallbackOwner)>>
//       renderCallback,
//   ffi.Pointer<ffi.Void> renderCallbackOwner,
// ) => _lib.create_filament_viewer_ffi;

// void create_swap_chain_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Void> surface,
//   int width,
//   int height,
// ) => _lib.create_swap_chain_ffi;

// void destroy_swap_chain_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.destroy_swap_chain_ffi;

// void create_render_target_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int nativeTextureId,
//   int width,
//   int height,
// ) => _lib.create_render_target_ffi;

// void destroy_filament_viewer_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.destroy_filament_viewer_ffi;

// void render_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.render_ffi;

// FilamentRenderCallback make_render_callback_fn_pointer(
//   FilamentRenderCallback arg0,
// ) => _lib.make_render_callback_fn_pointer;

// void set_rendering_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   bool rendering,
// ) => _lib.set_rendering_ffi;

// void set_frame_interval_ffi(
//   double frameInterval,
// ) => _lib.set_frame_interval_ffi;

// void update_viewport_and_camera_projection_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int width,
//   int height,
//   double scaleFactor,
// ) => _lib.update_viewport_and_camera_projection_ffi;

// void set_background_color_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   double r,
//   double g,
//   double b,
//   double a,
// ) => _lib.set_background_color_ffi;

// void clear_background_image_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_background_image_ffi;

// void set_background_image_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> path,
//   bool fillHeight,
// ) => _lib.set_background_image_ffi;

// void set_background_image_position_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   double x,
//   double y,
//   bool clamp,
// ) => _lib.set_background_image_position_ffi;

// void set_tone_mapping_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int toneMapping,
// ) => _lib.set_tone_mapping_ffi;

// void set_bloom_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   double strength,
// ) => _lib.set_bloom_ffi;

// void load_skybox_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> skyboxPath,
// ) => _lib.load_skybox_ffi;

// void load_ibl_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   ffi.Pointer<ffi.Char> iblPath,
//   double intensity,
// ) => _lib.load_ibl_ffi;

// void remove_skybox_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.remove_skybox_ffi;

// void remove_ibl_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.remove_ibl_ffi;

// int add_light_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int type,
//   double colour,
//   double intensity,
//   double posX,
//   double posY,
//   double posZ,
//   double dirX,
//   double dirY,
//   double dirZ,
//   bool shadows,
// ) => _lib.add_light_ffi;

// void remove_light_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int entityId,
// ) => _lib.remove_light_ffi;

// void clear_lights_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_lights_ffi;

// int load_glb_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   ffi.Pointer<ffi.Char> assetPath,
// ) => _lib.load_glb_ffi;

// void load_glb_async_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   ffi.Pointer<ffi.Char> assetPath,
//   ffi.Pointer<EntityId> out,
// ) => _lib.load_glb_async_ffi;

// int load_gltf_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   ffi.Pointer<ffi.Char> assetPath,
//   ffi.Pointer<ffi.Char> relativePath,
// ) => _lib.load_gltf_ffi;

// void remove_asset_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int asset,
// ) => _lib.remove_asset_ffi;

// void clear_assets_ffi(
//   ffi.Pointer<ffi.Void> viewer,
// ) => _lib.clear_assets_ffi;

// bool set_camera_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int asset,
//   ffi.Pointer<ffi.Char> nodeName,
// ) => _lib.set_camera_ffi;

// void apply_weights_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> weights,
//   int count,
// ) => _lib.apply_weights_ffi;

// void play_animation_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int index,
//   bool loop,
//   bool reverse,
//   bool replaceActive,
//   double crossfade,
// ) => _lib.play_animation_ffi;

// void set_animation_frame_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int animationIndex,
//   int animationFrame,
// ) => _lib.set_animation_frame_ffi;

// void stop_animation_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   int index,
// ) => _lib.stop_animation_ffi;

// int get_animation_count_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
// ) => _lib.get_animation_count_ffi;

// void get_animation_name_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> outPtr,
//   int index,
// ) => _lib.get_animation_name_ffi;

// void get_morph_target_name_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
//   ffi.Pointer<ffi.Char> outPtr,
//   int index,
// ) => _lib.get_morph_target_name_ffi;

// int get_morph_target_name_count_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> meshName,
// ) => _lib.get_morph_target_name_count_ffi;

// void set_morph_target_weights_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> morphData,
//   int numWeights,
// ) => _lib.set_morph_target_weights_ffi;

// bool set_morph_animation_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> morphData,
//   ffi.Pointer<ffi.Int> morphIndices,
//   int numMorphTargets,
//   int numFrames,
//   double frameLengthInMs,
// ) => _lib.set_morph_animation_ffi;

// bool set_bone_transform_ffi(
//   ffi.Pointer<ffi.Void> assetManager,
//   int asset,
//   ffi.Pointer<ffi.Char> entityName,
//   ffi.Pointer<ffi.Float> transform,
//   ffi.Pointer<ffi.Char> boneName,
// ) => _lib.set_bone_transform_ffi;

// void set_post_processing_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   bool enabled,
// ) => _lib.set_post_processing_ffi;

// void pick_ffi(
//   ffi.Pointer<ffi.Void> viewer,
//   int x,
//   int y,
//   ffi.Pointer<EntityId> entityId,
// ) => _lib.set_post_processing_ffi;

// void ios_dummy_ffi() => _lib.ios_dummy_ffi;

// // final class ResourceLoaderWrapper extends ffi.Struct {
// //   external LoadFilamentResource mLoadFilamentResource;

// //   external FreeFilamentResource mFreeFilamentResource;

// //   external LoadFilamentResourceFromOwner mLoadFilamentResourceFromOwner;

// //   external FreeFilamentResourceFromOwner mFreeFilamentResourceFromOwner;

// //   external ffi.Pointer<ffi.Void> mOwner;
// // }

// typedef LoadFilamentResource = ffi.Pointer<ffi.Opaque>;
// // typedef LoadFilamentResourceFunction = ResourceBuffer Function(
// //     ffi.Pointer<ffi.Char> uri) => _lib.Function;

// // final class ResourceBuffer extends ffi.Struct {
// //   external ffi.Pointer<ffi.Void> data;

// //   @ffi.Int32()
// //   external int size;

// //   @ffi.Int32()
// //   external int id;
// // }

// typedef FreeFilamentResource = ffi.Pointer<ffi.Opaque>;
// // typedef FreeFilamentResourceFunction = ffi.Void Function(ResourceBuffer) => _lib.Function;
// // typedef DartFreeFilamentResourceFunction = void Function(ResourceBuffer) => _lib.Function;
// typedef LoadFilamentResourceFromOwner = ffi.Pointer<ffi.Opaque>;
// // typedef LoadFilamentResourceFromOwnerFunction = ResourceBuffer Function(
// //     ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>) => _lib.Function;
// typedef FreeFilamentResourceFromOwner
//     = ffi.Pointer<ffi.NativeFunction<FreeFilamentResourceFromOwnerFunction>>;
// // typedef FreeFilamentResourceFromOwnerFunction = ffi.Void Function(
// //     ResourceBuffer, ffi.Pointer<ffi.Void>) => _lib.Function;
// // typedef DartFreeFilamentResourceFromOwnerFunction = void Function(
// //     ResourceBuffer, ffi.Pointer<ffi.Void>) => _lib.Function;

// /// This header replicates most of the methods in FlutterFilamentApi.h, and is only intended to be used to generate client FFI bindings.
// /// The intention is that calling one of these methods will call its respective method in FlutterFilamentApi.h, but wrapped in some kind of thread runner to ensure thread safety.
// typedef EntityId = ffi.Int32;
// typedef DartEntityId = int;
// typedef _ManipulatorMode = ffi.Int32;
// typedef Dart_ManipulatorMode = int;
// typedef FilamentRenderCallback
//     = ffi.Pointer<ffi.NativeFunction<FilamentRenderCallbackFunction>>;
// typedef FilamentRenderCallbackFunction = ffi.Void Function(
//     ffi.Pointer<ffi.Void> owner) => _lib.Function;
// typedef DartFilamentRenderCallbackFunction = void Function(
//     ffi.Pointer<ffi.Void> owner) => _lib.Function;

// const int __WORDSIZE = 64;

// const int __DARWIN_ONLY_64_BIT_INO_T = 1;

// const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

// const int __DARWIN_ONLY_VERS_1050 = 1;

// const int __DARWIN_UNIX03 = 1;

// const int __DARWIN_64_BIT_INO_T = 1;

// const int __DARWIN_VERS_1050 = 1;

// const int __DARWIN_NON_CANCELABLE = 0;

// const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

// const int __DARWIN_C_ANSI = 4096;

// const int __DARWIN_C_FULL = 900000;

// const int __DARWIN_C_LEVEL = 900000;

// const int __STDC_WANT_LIB_EXT1__ = 1;

// const int __DARWIN_NO_LONG_LONG = 0;

// const int _DARWIN_FEATURE_64_BIT_INODE = 1;

// const int _DARWIN_FEATURE_ONLY_64_BIT_INODE = 1;

// const int _DARWIN_FEATURE_ONLY_VERS_1050 = 1;

// const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

// const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

// const int __has_ptrcheck = 0;

// const int __DARWIN_NULL = 0;

// const int __PTHREAD_SIZE__ = 8176;

// const int __PTHREAD_ATTR_SIZE__ = 56;

// const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

// const int __PTHREAD_MUTEX_SIZE__ = 56;

// const int __PTHREAD_CONDATTR_SIZE__ = 8;

// const int __PTHREAD_COND_SIZE__ = 40;

// const int __PTHREAD_ONCE_SIZE__ = 8;

// const int __PTHREAD_RWLOCK_SIZE__ = 192;

// const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

// const int USER_ADDR_NULL = 0;

// const int INT8_MAX = 127;

// const int INT16_MAX = 32767;

// const int INT32_MAX = 2147483647;

// const int INT64_MAX = 9223372036854775807;

// const int INT8_MIN = -128;

// const int INT16_MIN = -32768;

// const int INT32_MIN = -2147483648;

// const int INT64_MIN = -9223372036854775808;

// const int UINT8_MAX = 255;

// const int UINT16_MAX = 65535;

// const int UINT32_MAX = 4294967295;

// const int UINT64_MAX = -1;

// const int INT_LEAST8_MIN = -128;

// const int INT_LEAST16_MIN = -32768;

// const int INT_LEAST32_MIN = -2147483648;

// const int INT_LEAST64_MIN = -9223372036854775808;

// const int INT_LEAST8_MAX = 127;

// const int INT_LEAST16_MAX = 32767;

// const int INT_LEAST32_MAX = 2147483647;

// const int INT_LEAST64_MAX = 9223372036854775807;

// const int UINT_LEAST8_MAX = 255;

// const int UINT_LEAST16_MAX = 65535;

// const int UINT_LEAST32_MAX = 4294967295;

// const int UINT_LEAST64_MAX = -1;

// const int INT_FAST8_MIN = -128;

// const int INT_FAST16_MIN = -32768;

// const int INT_FAST32_MIN = -2147483648;

// const int INT_FAST64_MIN = -9223372036854775808;

// const int INT_FAST8_MAX = 127;

// const int INT_FAST16_MAX = 32767;

// const int INT_FAST32_MAX = 2147483647;

// const int INT_FAST64_MAX = 9223372036854775807;

// const int UINT_FAST8_MAX = 255;

// const int UINT_FAST16_MAX = 65535;

// const int UINT_FAST32_MAX = 4294967295;

// const int UINT_FAST64_MAX = -1;

// const int INTPTR_MAX = 9223372036854775807;

// const int INTPTR_MIN = -9223372036854775808;

// const int UINTPTR_MAX = -1;

// const int INTMAX_MAX = 9223372036854775807;

// const int UINTMAX_MAX = -1;

// const int INTMAX_MIN = -9223372036854775808;

// const int PTRDIFF_MIN = -9223372036854775808;

// const int PTRDIFF_MAX = 9223372036854775807;

// const int SIZE_MAX = -1;

// const int RSIZE_MAX = 9223372036854775807;

// const int WCHAR_MAX = 2147483647;

// const int WCHAR_MIN = -2147483648;

// const int WINT_MIN = -2147483648;

// const int WINT_MAX = 2147483647;

// const int SIG_ATOMIC_MIN = -2147483648;

// const int SIG_ATOMIC_MAX = 2147483647;

// const int __DARWIN_WCHAR_MAX = 2147483647;

// const int __DARWIN_WCHAR_MIN = -2147483648;

// const int __DARWIN_WEOF = -1;

// const int _FORTIFY_SOURCE = 2;

// const int NULL = 0;

// const int __bool_true_false_are_defined = 1;

// const int true1 = 1;

// const int false1 = 0;
