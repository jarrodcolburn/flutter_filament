// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'package:flutter_filament/ffi/ffi_web_js/generated_bindings_js.dart';
import 'package:wasm_ffi/wasm_ffi.dart'
    hide
        Uint8Pointer,
        FloatPointer,
        DoublePointer,
        Int32Pointer,
        Int64Pointer,
        StringUtf8Pointer;
import 'dart:js_interop';
export 'generated_bindings_js.dart' show EntityId;

late NativeLibrary _lib;
void flutter_filament_web_load_resource_callback(
    Pointer<Void> data, int length, Pointer<Void> context) {
  _lib.flutter_filament_web_load_resource_callback(data, length, context);
}

int flutter_filament_web_get(Pointer<Char> ptr, int offset) {
  return _lib.flutter_filament_web_get(ptr, offset);
}

double flutter_filament_web_get_float(Pointer<Float> ptr, int offset) {
  return _lib.flutter_filament_web_get_float(ptr, offset);
}

double flutter_filament_web_get_double(Pointer<Double> ptr, int offset) {
  return _lib.flutter_filament_web_get_double(ptr, offset);
}

Pointer<Void> flutter_filament_web_get_pointer(
    Pointer<Pointer<Void>> ptr, int offset) {
  return _lib.flutter_filament_web_get_pointer(ptr, offset);
}

void flutter_filament_web_set(Pointer<Char> ptr, int offset, int val) {
  _lib.flutter_filament_web_set(ptr, offset, val);
}

void flutter_filament_web_set_float(
    Pointer<Float> ptr, int offset, double val) {
  _lib.flutter_filament_web_set_float(ptr, offset, val);
}

void flutter_filament_web_set_double(
    Pointer<Double> ptr, int offset, double val) {
  _lib.flutter_filament_web_set_double(ptr, offset, val);
}

void flutter_filament_web_set_pointer(
    Pointer<Pointer<Void>> ptr, int offset, Pointer<Void> val) {
  _lib.flutter_filament_web_set_pointer(ptr, offset, val);
}

int flutter_filament_web_get_int32(Pointer<Int32> ptr, int offset) {
  return _lib.flutter_filament_web_get_int32(ptr, offset);
}

void flutter_filament_web_set_int32(Pointer<Int32> ptr, int offset, int value) {
  _lib.flutter_filament_web_set_int32(ptr, offset, value);
}

int flutter_filament_web_get_address(Pointer<Pointer<Void>> out) {
  return _lib.flutter_filament_web_get_address(out);
}

Pointer<Void> flutter_filament_web_allocate(int size) {
  return _lib.flutter_filament_web_allocate(size);
}

void flutter_filament_web_free(Pointer<Void> ptr) {
  _lib.flutter_filament_web_free(ptr);
}

int flutter_filament_web_create_gl_context() {
  return _lib.flutter_filament_web_create_gl_context();
}

Pointer<Void> flutter_filament_web_get_resource_loader_wrapper() {
  return _lib.flutter_filament_web_get_resource_loader_wrapper();
}

Pointer<Void> create_filament_viewer(
    Pointer<Void> context,
    Pointer<Void> loader,
    Pointer<Void> platform,
    Pointer<Char> uberArchivePath) {
  return _lib.create_filament_viewer(
      context, loader, platform, uberArchivePath);
}

void destroy_filament_viewer(Pointer<Void> viewer) {
  _lib.destroy_filament_viewer(viewer);
}

Pointer<Void> get_asset_manager(Pointer<Void> viewer) {
  return _lib.get_asset_manager(viewer);
}

void create_render_target(
    Pointer<Void> viewer, int texture, int width, int height) {
  _lib.create_render_target(viewer, texture, width, height);
}

void clear_background_image(Pointer<Void> viewer) {
  _lib.clear_background_image(viewer);
}

void set_background_image(
    Pointer<Void> viewer, Pointer<Char> path, bool fillHeight) {
  _lib.set_background_image(viewer, path, fillHeight);
}

void set_background_image_position(
    Pointer<Void> viewer, double x, double y, bool clamp) {
  _lib.set_background_image_position(viewer, x, y, clamp);
}

void set_background_color(
    Pointer<Void> viewer, double r, double g, double b, double a) {
  _lib.set_background_color(viewer, r, g, b, a);
}

void set_tone_mapping(Pointer<Void> viewer, int toneMapping) {
  _lib.set_tone_mapping(viewer, toneMapping);
}

void set_bloom(Pointer<Void> viewer, double strength) {
  _lib.set_bloom(viewer, strength);
}

void load_skybox(Pointer<Void> viewer, Pointer<Char> skyboxPath) {
  _lib.load_skybox(viewer, skyboxPath);
}

void load_ibl(Pointer<Void> viewer, Pointer<Char> iblPath, double intensity) {
  _lib.load_ibl(viewer, iblPath, intensity);
}

void rotate_ibl(Pointer<Void> viewer, Pointer<Float> rotationMatrix) {
  _lib.rotate_ibl(viewer, rotationMatrix);
}

void remove_skybox(Pointer<Void> viewer) {
  _lib.remove_skybox(viewer);
}

void remove_ibl(Pointer<Void> viewer) {
  _lib.remove_ibl(viewer);
}

int add_light(
    Pointer<Void> viewer,
    int type,
    double colour,
    double intensity,
    double posX,
    double posY,
    double posZ,
    double dirX,
    double dirY,
    double dirZ,
    bool shadows) {
  return _lib.add_light(viewer, type, colour, intensity, posX, posY, posZ, dirX,
      dirY, dirZ, shadows);
}

void remove_light(Pointer<Void> viewer, int entityId) {
  _lib.remove_light(viewer, entityId);
}

void clear_lights(Pointer<Void> viewer) {
  _lib.clear_lights(viewer);
}

int load_glb(Pointer<Void> assetManager, Pointer<Char> assetPath, bool unlit) {
  return _lib.load_glb(assetManager, assetPath, unlit);
}

int load_gltf(Pointer<Void> assetManager, Pointer<Char> assetPath,
    Pointer<Char> relativePath) {
  return _lib.load_gltf(assetManager, assetPath, relativePath);
}

bool set_camera(Pointer<Void> viewer, int asset, Pointer<Char> nodeName) {
  return _lib.set_camera(viewer, asset, nodeName);
}

void set_view_frustum_culling(Pointer<Void> viewer, bool enabled) {
  _lib.set_view_frustum_culling(viewer, enabled);
}

void render(
    Pointer<Void> viewer,
    int frameTimeInNanos,
    Pointer<Void> pixelBuffer,
    Pointer<NativeFunction<Void Function(Pointer<Void>, Size, Pointer<Void>)>>
        callback,
    Pointer<Void> data) {
  _lib.render(viewer, frameTimeInNanos, pixelBuffer, callback, data);
}

void create_swap_chain(
    Pointer<Void> viewer, Pointer<Void> window, int width, int height) {
  _lib.create_swap_chain(viewer, window, width, height);
}

void destroy_swap_chain(Pointer<Void> viewer) {
  _lib.destroy_swap_chain(viewer);
}

void set_frame_interval(Pointer<Void> viewer, double interval) {
  _lib.set_frame_interval(viewer, interval);
}

void update_viewport_and_camera_projection(
    Pointer<Void> viewer, int width, int height, double scaleFactor) {
  _lib.update_viewport_and_camera_projection(
      viewer, width, height, scaleFactor);
}

void scroll_begin(Pointer<Void> viewer) {
  _lib.scroll_begin(viewer);
}

void scroll_update(Pointer<Void> viewer, double x, double y, double z) {
  _lib.scroll_update(viewer, x, y, z);
}

void scroll_end(Pointer<Void> viewer) {
  _lib.scroll_end(viewer);
}

void grab_begin(Pointer<Void> viewer, double x, double y, bool pan) {
  _lib.grab_begin(viewer, x, y, pan);
}

void grab_update(Pointer<Void> viewer, double x, double y) {
  _lib.grab_update(viewer, x, y);
}

void grab_end(Pointer<Void> viewer) {
  _lib.grab_end(viewer);
}

void apply_weights(Pointer<Void> assetManager, int asset,
    Pointer<Char> entityName, Pointer<Float> weights, int count) {
  _lib.apply_weights(assetManager, asset, entityName, weights, count);
}

void set_morph_target_weights(Pointer<Void> assetManager, int asset,
    Pointer<Char> entityName, Pointer<Float> morphData, int numWeights) {
  _lib.set_morph_target_weights(
      assetManager, asset, entityName, morphData, numWeights);
}

bool set_morph_animation(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Char> entityName,
    Pointer<Float> morphData,
    Pointer<Int> morphIndices,
    int numMorphTargets,
    int numFrames,
    double frameLengthInMs) {
  return _lib.set_morph_animation(assetManager, asset, entityName, morphData,
      morphIndices, numMorphTargets, numFrames, frameLengthInMs);
}

void add_bone_animation(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Float> frameData,
    int numFrames,
    Pointer<Char> boneName,
    Pointer<Pointer<Char>> meshNames,
    int numMeshTargets,
    double frameLengthInMs) {
  _lib.add_bone_animation(assetManager, asset, frameData, numFrames, boneName,
      meshNames, numMeshTargets, frameLengthInMs);
}

bool set_bone_transform(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Char> entityName,
    Pointer<Float> transform,
    Pointer<Char> boneName) {
  return _lib.set_bone_transform(
      assetManager, asset, entityName, transform, boneName);
}

void play_animation(Pointer<Void> assetManager, int asset, int index, bool loop,
    bool reverse, bool replaceActive, double crossfade) {
  _lib.play_animation(
      assetManager, asset, index, loop, reverse, replaceActive, crossfade);
}

void set_animation_frame(Pointer<Void> assetManager, int asset,
    int animationIndex, int animationFrame) {
  _lib.set_animation_frame(assetManager, asset, animationIndex, animationFrame);
}

void stop_animation(Pointer<Void> assetManager, int asset, int index) {
  _lib.stop_animation(assetManager, asset, index);
}

int get_animation_count(Pointer<Void> assetManager, int asset) {
  return _lib.get_animation_count(assetManager, asset);
}

void get_animation_name(
    Pointer<Void> assetManager, int asset, Pointer<Char> outPtr, int index) {
  _lib.get_animation_name(assetManager, asset, outPtr, index);
}

double get_animation_duration(
    Pointer<Void> assetManager, int asset, int index) {
  return _lib.get_animation_duration(assetManager, asset, index);
}

void get_morph_target_name(Pointer<Void> assetManager, int asset,
    Pointer<Char> meshName, Pointer<Char> outPtr, int index) {
  _lib.get_morph_target_name(assetManager, asset, meshName, outPtr, index);
}

int get_morph_target_name_count(
    Pointer<Void> assetManager, int asset, Pointer<Char> meshName) {
  return _lib.get_morph_target_name_count(assetManager, asset, meshName);
}

void remove_asset(Pointer<Void> viewer, int asset) {
  _lib.remove_asset(viewer, asset);
}

void clear_assets(Pointer<Void> viewer) {
  _lib.clear_assets(viewer);
}

bool set_material_color(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Char> meshName,
    int materialIndex,
    double r,
    double g,
    double b,
    double a) {
  return _lib.set_material_color(
      assetManager, asset, meshName, materialIndex, r, g, b, a);
}

void transform_to_unit_cube(Pointer<Void> assetManager, int asset) {
  _lib.transform_to_unit_cube(assetManager, asset);
}

void set_position(
    Pointer<Void> assetManager, int asset, double x, double y, double z) {
  _lib.set_position(assetManager, asset, x, y, z);
}

void set_rotation(Pointer<Void> assetManager, int asset, double rads, double x,
    double y, double z) {
  _lib.set_rotation(assetManager, asset, rads, x, y, z);
}

void set_scale(Pointer<Void> assetManager, int asset, double scale) {
  _lib.set_scale(assetManager, asset, scale);
}

void move_camera_to_asset(Pointer<Void> viewer, int asset) {
  _lib.move_camera_to_asset(viewer, asset);
}

void set_camera_exposure(Pointer<Void> viewer, double aperture,
    double shutterSpeed, double sensitivity) {
  _lib.set_camera_exposure(viewer, aperture, shutterSpeed, sensitivity);
}

void set_camera_position(Pointer<Void> viewer, double x, double y, double z) {
  _lib.set_camera_position(viewer, x, y, z);
}

void get_camera_position(Pointer<Void> viewer) {
  _lib.get_camera_position(viewer);
}

void set_camera_rotation(
    Pointer<Void> viewer, double rads, double x, double y, double z) {
  _lib.set_camera_rotation(viewer, rads, x, y, z);
}

void set_camera_model_matrix(Pointer<Void> viewer, Pointer<Float> matrix) {
  _lib.set_camera_model_matrix(viewer, matrix);
}

Pointer<Double> get_camera_model_matrix(Pointer<Void> viewer) {
  return _lib.get_camera_model_matrix(viewer);
}

Pointer<Double> get_camera_view_matrix(Pointer<Void> viewer) {
  return _lib.get_camera_view_matrix(viewer);
}

Pointer<Double> get_camera_projection_matrix(Pointer<Void> viewer) {
  return _lib.get_camera_projection_matrix(viewer);
}

void set_camera_projection_matrix(
    Pointer<Void> viewer, Pointer<Double> matrix, double near, double far) {
  _lib.set_camera_projection_matrix(viewer, matrix, near, far);
}

void set_camera_culling(Pointer<Void> viewer, double near, double far) {
  _lib.set_camera_culling(viewer, near, far);
}

double get_camera_culling_near(Pointer<Void> viewer) {
  return _lib.get_camera_culling_near(viewer);
}

double get_camera_culling_far(Pointer<Void> viewer) {
  return _lib.get_camera_culling_far(viewer);
}

Pointer<Double> get_camera_culling_projection_matrix(Pointer<Void> viewer) {
  return _lib.get_camera_culling_projection_matrix(viewer);
}

Pointer<Double> get_camera_frustum(Pointer<Void> viewer) {
  return _lib.get_camera_frustum(viewer);
}

void set_camera_focal_length(Pointer<Void> viewer, double focalLength) {
  _lib.set_camera_focal_length(viewer, focalLength);
}

void set_camera_focus_distance(Pointer<Void> viewer, double focusDistance) {
  _lib.set_camera_focus_distance(viewer, focusDistance);
}

void set_camera_manipulator_options(Pointer<Void> viewer, int mode,
    double orbitSpeedX, double orbitSpeedY, double zoomSpeed) {
  _lib.set_camera_manipulator_options(
      viewer, mode, orbitSpeedX, orbitSpeedY, zoomSpeed);
}

int hide_mesh(Pointer<Void> assetManager, int asset, Pointer<Char> meshName) {
  return _lib.hide_mesh(assetManager, asset, meshName);
}

int reveal_mesh(Pointer<Void> assetManager, int asset, Pointer<Char> meshName) {
  return _lib.reveal_mesh(assetManager, asset, meshName);
}

void set_post_processing(Pointer<Void> viewer, bool enabled) {
  _lib.set_post_processing(viewer, enabled);
}

void pick(Pointer<Void> viewer, int x, int y, Pointer<Int32> entityId) {
  _lib.pick(viewer, x, y, entityId);
}

Pointer<Char> get_name_for_entity(Pointer<Void> assetManager, int entityId) {
  return _lib.get_name_for_entity(assetManager, entityId);
}

int find_child_entity_by_name(
    Pointer<Void> assetManager, int parent, Pointer<Char> name) {
  return _lib.find_child_entity_by_name(assetManager, parent, name);
}

void set_recording(Pointer<Void> viewer, bool recording) {
  _lib.set_recording(viewer, recording);
}

void set_recording_output_directory(
    Pointer<Void> viewer, Pointer<Char> outputDirectory) {
  _lib.set_recording_output_directory(viewer, outputDirectory);
}

void ios_dummy() {
  _lib.ios_dummy();
}

void flutter_filament_free(Pointer<Void> ptr) {
  _lib.flutter_filament_free(ptr);
}

Pointer<Void> create_filament_viewer_ffi(
    Pointer<Void> context,
    Pointer<Void> platform,
    Pointer<Char> uberArchivePath,
    Pointer<Void> loader,
    Pointer<NativeFunction<Void Function(Pointer<Void>)>> renderCallback,
    Pointer<Void> renderCallbackOwner) {
  return _lib.create_filament_viewer_ffi(context, platform, uberArchivePath,
      loader, renderCallback, renderCallbackOwner);
}

void create_swap_chain_ffi(
    Pointer<Void> viewer, Pointer<Void> surface, int width, int height) {
  _lib.create_swap_chain_ffi(viewer, surface, width, height);
}

void destroy_swap_chain_ffi(Pointer<Void> viewer) {
  _lib.destroy_swap_chain_ffi(viewer);
}

void create_render_target_ffi(
    Pointer<Void> viewer, int nativeTextureId, int width, int height) {
  _lib.create_render_target_ffi(viewer, nativeTextureId, width, height);
}

void destroy_filament_viewer_ffi(Pointer<Void> viewer) {
  _lib.destroy_filament_viewer_ffi(viewer);
}

void render_ffi(Pointer<Void> viewer) {
  _lib.render_ffi(viewer);
}

Pointer<NativeFunction<Void Function(Pointer<Void>)>>
    make_render_callback_fn_pointer(
        Pointer<NativeFunction<Void Function(Pointer<Void>)>> arg0) {
  return _lib.make_render_callback_fn_pointer(arg0);
}

void set_rendering_ffi(Pointer<Void> viewer, bool rendering) {
  _lib.set_rendering_ffi(viewer, rendering);
}

void set_frame_interval_ffi(double frameInterval) {
  _lib.set_frame_interval_ffi(frameInterval);
}

void update_viewport_and_camera_projection_ffi(
    Pointer<Void> viewer, int width, int height, double scaleFactor) {
  _lib.update_viewport_and_camera_projection_ffi(
      viewer, width, height, scaleFactor);
}

void set_background_color_ffi(
    Pointer<Void> viewer, double r, double g, double b, double a) {
  _lib.set_background_color_ffi(viewer, r, g, b, a);
}

void clear_background_image_ffi(Pointer<Void> viewer) {
  _lib.clear_background_image_ffi(viewer);
}

void set_background_image_ffi(
    Pointer<Void> viewer, Pointer<Char> path, bool fillHeight) {
  _lib.set_background_image_ffi(viewer, path, fillHeight);
}

void set_background_image_position_ffi(
    Pointer<Void> viewer, double x, double y, bool clamp) {
  _lib.set_background_image_position_ffi(viewer, x, y, clamp);
}

void set_tone_mapping_ffi(Pointer<Void> viewer, int toneMapping) {
  _lib.set_tone_mapping_ffi(viewer, toneMapping);
}

void set_bloom_ffi(Pointer<Void> viewer, double strength) {
  _lib.set_bloom_ffi(viewer, strength);
}

void load_skybox_ffi(Pointer<Void> viewer, Pointer<Char> skyboxPath) {
  _lib.load_skybox_ffi(viewer, skyboxPath);
}

void load_ibl_ffi(
    Pointer<Void> viewer, Pointer<Char> iblPath, double intensity) {
  _lib.load_ibl_ffi(viewer, iblPath, intensity);
}

void remove_skybox_ffi(Pointer<Void> viewer) {
  _lib.remove_skybox_ffi(viewer);
}

void remove_ibl_ffi(Pointer<Void> viewer) {
  _lib.remove_ibl_ffi(viewer);
}

int add_light_ffi(
    Pointer<Void> viewer,
    int type,
    double colour,
    double intensity,
    double posX,
    double posY,
    double posZ,
    double dirX,
    double dirY,
    double dirZ,
    bool shadows) {
  return _lib.add_light_ffi(viewer, type, colour, intensity, posX, posY, posZ,
      dirX, dirY, dirZ, shadows);
}

void remove_light_ffi(Pointer<Void> viewer, int entityId) {
  _lib.remove_light_ffi(viewer, entityId);
}

void clear_lights_ffi(Pointer<Void> viewer) {
  _lib.clear_lights_ffi(viewer);
}

int load_glb_ffi(Pointer<Void> assetManager, Pointer<Char> assetPath) {
  return _lib.load_glb_ffi(assetManager, assetPath);
}

void load_glb_async_ffi(
    Pointer<Void> assetManager, Pointer<Char> assetPath, Pointer<Int32> out) {
  _lib.load_glb_async_ffi(assetManager, assetPath, out);
}

int load_gltf_ffi(Pointer<Void> assetManager, Pointer<Char> assetPath,
    Pointer<Char> relativePath) {
  return _lib.load_gltf_ffi(assetManager, assetPath, relativePath);
}

void remove_asset_ffi(Pointer<Void> viewer, int asset) {
  _lib.remove_asset_ffi(viewer, asset);
}

void clear_assets_ffi(Pointer<Void> viewer) {
  _lib.clear_assets_ffi(viewer);
}

bool set_camera_ffi(Pointer<Void> viewer, int asset, Pointer<Char> nodeName) {
  return _lib.set_camera_ffi(viewer, asset, nodeName);
}

void apply_weights_ffi(Pointer<Void> assetManager, int asset,
    Pointer<Char> entityName, Pointer<Float> weights, int count) {
  _lib.apply_weights_ffi(assetManager, asset, entityName, weights, count);
}

void play_animation_ffi(Pointer<Void> assetManager, int asset, int index,
    bool loop, bool reverse, bool replaceActive, double crossfade) {
  _lib.play_animation_ffi(
      assetManager, asset, index, loop, reverse, replaceActive, crossfade);
}

void set_animation_frame_ffi(Pointer<Void> assetManager, int asset,
    int animationIndex, int animationFrame) {
  _lib.set_animation_frame_ffi(
      assetManager, asset, animationIndex, animationFrame);
}

void stop_animation_ffi(Pointer<Void> assetManager, int asset, int index) {
  _lib.stop_animation_ffi(assetManager, asset, index);
}

int get_animation_count_ffi(Pointer<Void> assetManager, int asset) {
  return _lib.get_animation_count_ffi(assetManager, asset);
}

void get_animation_name_ffi(
    Pointer<Void> assetManager, int asset, Pointer<Char> outPtr, int index) {
  _lib.get_animation_name_ffi(assetManager, asset, outPtr, index);
}

void get_morph_target_name_ffi(Pointer<Void> assetManager, int asset,
    Pointer<Char> meshName, Pointer<Char> outPtr, int index) {
  _lib.get_morph_target_name_ffi(assetManager, asset, meshName, outPtr, index);
}

int get_morph_target_name_count_ffi(
    Pointer<Void> assetManager, int asset, Pointer<Char> meshName) {
  return _lib.get_morph_target_name_count_ffi(assetManager, asset, meshName);
}

void set_morph_target_weights_ffi(Pointer<Void> assetManager, int asset,
    Pointer<Char> entityName, Pointer<Float> morphData, int numWeights) {
  _lib.set_morph_target_weights_ffi(
      assetManager, asset, entityName, morphData, numWeights);
}

bool set_morph_animation_ffi(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Char> entityName,
    Pointer<Float> morphData,
    Pointer<Int> morphIndices,
    int numMorphTargets,
    int numFrames,
    double frameLengthInMs) {
  return _lib.set_morph_animation_ffi(assetManager, asset, entityName,
      morphData, morphIndices, numMorphTargets, numFrames, frameLengthInMs);
}

bool set_bone_transform_ffi(
    Pointer<Void> assetManager,
    int asset,
    Pointer<Char> entityName,
    Pointer<Float> transform,
    Pointer<Char> boneName) {
  return _lib.set_bone_transform_ffi(
      assetManager, asset, entityName, transform, boneName);
}

void set_post_processing_ffi(Pointer<Void> viewer, bool enabled) {
  _lib.set_post_processing_ffi(viewer, enabled);
}

void pick_ffi(Pointer<Void> viewer, int x, int y, Pointer<Int32> entityId) {
  _lib.pick_ffi(viewer, x, y, entityId);
}

void ios_dummy_ffi() {
  _lib.ios_dummy_ffi();
}
